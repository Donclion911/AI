temp=document.getElementById("doing");
x=temp.getContext("2d");
temp.style.backgroundColor="gray";
next=0;
setInterval(_goahead,0)
shots=[];
DNA=[];
target=class{
    constructor(x,y,size){
        this.x=x;
        this.y=y;
        this.size=size;
    }
    show(){
        x.beginPath();
        x.arc(this.x,this.y,this.size,0,2*Math.PI);
        x.strokeStyle="white";
        x.stroke();
        x.closePath();
    }
}
block=class{
    constructor(x,y,w,h)
    {
        this.x=x;
        this.y=y;
        this.w=w;
        this.h=h;
    }
    show(){
        x.beginPath();
        x.strokeStyle="red";
        x.rect(this.x,this.y,this.w,this.h);
        x.stroke();
        x.closePath();
    }
}
blck= new block(40,temp.height/2,200,5);
blck2= new block(300,temp.height/2,730,5);

hit=new target(temp.width/2,40,30);
hit2=new target(200,80,35);
shot=class{
    constructor(speed,angle)
    {
        this.x=temp.width/2;
        this.y=temp.height-20;
        this.speed=speed;
        this.angle=angle;
        this.touched=false;
        this.map=[];
        this.step=0;
        this.force=null;
    }
    show()
    {
        x.beginPath();
        x.save()
        x.rect(this.x,this.y,5,20);
        x.restore();
        x.strokeStyle="white";
        x.stroke();
        x.closePath();
        if(!this.touched)
        {
            this.y-=this.speed*Math.sin(this.angle);
            this.x-=this.speed*Math.cos(this.angle);
            if(this.angle==undefined)
            {
                this.y=temp.height-20;
                this.x=temp.width/2;
                this.force=DNA[ Math.round(Math.random()*(DNA.length-1))];
                this.angle=Math.random()*((180-5)+5);
            }
            if(this.y<=0||this.y>=temp.height)
            {
                if(this.force==null)
                {
                    this.y=temp.height;
                    this.x=temp.width/2;
                    this.force=DNA[ Math.round(Math.random()*(DNA.length-1))];
                }
                if(DNA.length!=0)
                {
                    if(this.force!=null)
                    {
                        this.angle=this.force[this.step];
                        this.step++;
                        if(this.step>=this.force.length)
                        {
                            this.step=0;
                            this.force=DNA[0];
                        }
                    }
                    else
                    {
                        this.force=DNA[0];
                    }
                }
                else
                {
                    this.angle=Math.random()*((180-5)+5);
                }
            }
            if(this.x<=0||this.x>=temp.width)
            {
                if(this.force!=null)
                {
                    this.angle=this.force[this.step];
                    this.step++;
                }
                else
                {this.angle=Math.random()*(180-5)+5;}
            }
            if(this.x>=blck.x+2&&this.x<=blck.x+blck.w&&this.y<=blck.y&&this.y>=blck.y-blck.h-25)
            {
                this.y=temp.height;
                this.angle=Math.random()*((180-5)+5);
                this.force=null;
            }
            if(this.x>=blck2.x+2&&this.x<=blck2.x+blck2.w&&this.y<=blck2.y&&this.y>=blck2.y-blck2.h-25)
            {
                this.y=temp.height;
                this.angle=Math.random()*((180-5)+5);
                this.force=null;
            }
            if(this.y<=hit.y+hit.size&&this.y>=hit.y-hit.size && this.x>=hit.x-hit.size &&this.x<=hit.x+hit.size)
            {
                _learning(this);
            }
            if(this.y<=hit2.y+hit2.size&&this.y>=hit2.y-hit2.size && this.x>=hit2.x-hit2.size &&this.x<=hit2.x+hit2.size)
            {
                _learning(this);
            }            
        }
        if(!this.touched)
        {
            let unknown=this.angle;
            this.map.forEach(
                function(next)
                {
                    if(next==unknown)
                    {
                        unknown=false;
                        return;
                    }
                }
            )
            if(unknown)
            {
                this.map.push(JSON.parse(JSON.stringify(this.angle)));
            }
        }
    }
}
function _learning(obj)
{
        obj.touched=true;
        if(DNA.length<20 && obj.map.length<=15)
        {DNA.push(obj.map);}
        else{
            if(obj.map.length<=5)
            {
                DNA.pop();DNA.push(obj.map)
            }
        }
        obj.angle=null;
        obj.map=null;
}
function _goahead()
{
    x.clearRect(0,0,temp.width,temp.height);
    if(shots.length==0)
    {   
        for(i=1;i<=3000;i++)
        {
            shots.push(new shot(1, Math.random()*(180-5)+5));
        }
    }
    hit.show();
    hit2.show();
    blck.show();
    blck2.show();
    shots.forEach(function(next) {
        next.show();
    });
}
